"""Challenge 9 - http://www.practicepython.org/exercise/2014/04/02/09-guessing-game-one.html

Generate a random number between 1 and 9 (including 1 and 9). Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right. (Hint: remember to use the user input lessons from the very first exercise)

Extras:

Keep the game going until the user types ***exit***
Keep track of how many guesses the user has taken, and when the game ends, print this out."""

#import random to select random integers and time to make the game more interactive with the user... I dunno Dave?  Does this make it feel more real?

import random
from random import randint
import time


#create variable = a random secret number between given range
secret_number = random.randint(1,9)

#this is a test to see if program works, uncomment the next line to return to functional print statement
# print secret_number

print "I'm thinking of a number between 1 and 9..."

#make python pause before moving onto the next command for (x) seconds
time.sleep(1.5)

#create vairable to increment for continued play and thus break a while loop that could go on forever and ever and ever....
p = 1

#start a counter to maintain the number of guesses while in the while loop
counter = 0

while (p < 2):

	#Create variable = user's guess, turned into and integer for evaluating
	user_input = int(raw_input("what do you think my number is? \n").lower())
	#count the guess
	counter += 1

	#evaluate the guess relative to the random number to see if it is high or low
	if user_input < secret_number:
		print "Tooooo low, guess again.\n"

	elif user_input > secret_number:

		print "Tooooo high.\n"

		#once the user actually guesses the number tell them so and tell them how many times it took them by printing the counter
	else:
		print "Noice you got it!\n"

		time.sleep(1.5)

		print ("It only took you %s try" % counter)

		time.sleep(2.5)

		#simple sassy way to allow a user to break the while loop and exit the game
		play_again = raw_input("\nWE'LL JUST KEEP PLAYING UNTIL YOU TYPE: exit\n\notherwise just hit return \n").lower()

		if (play_again == "exit"):
			print "\nok fine, don't play with me anymore... sigh!"
			p = p + 1

		#to continue the game, create a new random number, reset the counter, and engage the user
		else: 
			secret_number = random.randint(1,9)

			counter = 0
			
			print "\nI have a new number! Guess again..."

			#this is a test to see if program works, uncomment the next line to return to functional print statement
			# print secret_number
			
			time.sleep(1.5)
			
			print "smarty pants"
			
			time.sleep(1.5)
